// <auto-generated />
using ContestPark.DataAccessLayer.Interfaces.Context;
using ContestPark.Entities.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ContestPark.DataAccessLayer.Migrations
{
    [DbContext(typeof(ContestParkContext))]
    partial class ContestParkContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.AskedQuestion", b =>
                {
                    b.Property<int>("AskedQuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("QuestionId");

                    b.Property<int>("SubCategoryId");

                    b.Property<string>("UserId");

                    b.HasKey("AskedQuestionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("AskedQuestions");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Boost", b =>
                {
                    b.Property<int>("BoostId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("Gold");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("PicturePath");

                    b.Property<bool>("Visibility");

                    b.HasKey("BoostId");

                    b.ToTable("Boosts");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<byte>("Order");

                    b.Property<string>("PicturePath");

                    b.Property<bool>("Visibility");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.CategoryLang", b =>
                {
                    b.Property<int>("CategoryLangId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("CategoryLangId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryLangs");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("ReceiverId");

                    b.Property<string>("SenderId");

                    b.HasKey("ChatId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.ChatBlock", b =>
                {
                    b.Property<int>("ChatBlockId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("WhoId");

                    b.Property<string>("WhonId");

                    b.HasKey("ChatBlockId");

                    b.HasIndex("WhoId");

                    b.HasIndex("WhonId");

                    b.ToTable("ChatBlocks");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.ChatReply", b =>
                {
                    b.Property<int>("ChatReplyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Message");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<bool>("ReceiverDeletingStatus");

                    b.Property<bool>("SenderDeletingStatus");

                    b.Property<string>("UserId");

                    b.Property<bool>("VisibilityStatus");

                    b.HasKey("ChatReplyId");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatReplies");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ParentId");

                    b.Property<int>("PostId");

                    b.Property<string>("Text");

                    b.Property<string>("UserId");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.CompletedMission", b =>
                {
                    b.Property<int>("CompletedMissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("MissionComplate");

                    b.Property<int>("MissionId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("UserId");

                    b.HasKey("CompletedMissionId");

                    b.HasIndex("MissionId");

                    b.HasIndex("UserId");

                    b.ToTable("CompletedMissions");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.ContestDate", b =>
                {
                    b.Property<int>("ContestDateId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("FinishDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("ContestDateId");

                    b.ToTable("ContestDates");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Cp", b =>
                {
                    b.Property<int>("CpId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CpAmount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("UserId");

                    b.HasKey("CpId");

                    b.HasIndex("UserId");

                    b.ToTable("Cps");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.CpInfo", b =>
                {
                    b.Property<int>("CpInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChipProcessName");

                    b.Property<int>("CpId");

                    b.Property<int>("CpSpent");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("CpInfoId");

                    b.HasIndex("CpId");

                    b.ToTable("CpInfoes");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Duel", b =>
                {
                    b.Property<int>("DuelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompetitorUserId");

                    b.Property<int>("Cp");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FounderUserId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("SubCategoryId");

                    b.HasKey("DuelId");

                    b.HasIndex("CompetitorUserId");

                    b.HasIndex("FounderUserId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Duels");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.DuelInfo", b =>
                {
                    b.Property<int>("DuelInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("CompetitorTime");

                    b.Property<byte>("CompetitorUserAnswer");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DuelId");

                    b.Property<byte>("FounderTime");

                    b.Property<byte>("FounderUserAnswer");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("QuestionId");

                    b.Property<byte>("TrueAnswer");

                    b.HasKey("DuelInfoId");

                    b.HasIndex("DuelId");

                    b.HasIndex("QuestionId");

                    b.ToTable("DuelInfoes");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Follow", b =>
                {
                    b.Property<int>("FollowId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FollowUpUserId");

                    b.Property<string>("FollowedUserId");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("FollowId");

                    b.HasIndex("FollowUpUserId");

                    b.HasIndex("FollowedUserId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.FollowCategory", b =>
                {
                    b.Property<int>("FollowCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("SubCategoryId");

                    b.Property<string>("UserId");

                    b.HasKey("FollowCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("FollowCategories");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Language", b =>
                {
                    b.Property<byte>("LanguageId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("LongName");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("ShortName");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("PostId");

                    b.Property<string>("UserId");

                    b.HasKey("LikeId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Mission", b =>
                {
                    b.Property<int>("MissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Gold");

                    b.Property<string>("MissionCloseingImage");

                    b.Property<string>("MissionOpeningImage");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<bool>("Visibility");

                    b.HasKey("MissionId");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.MissionLang", b =>
                {
                    b.Property<int>("MissionLangId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("LanguageId");

                    b.Property<string>("MissionDescription");

                    b.Property<int>("MissionId");

                    b.Property<string>("MissionName");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("MissionLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MissionId");

                    b.ToTable("MissionLangs");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Link");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<DateTime>("NotificationDate");

                    b.Property<bool>("NotificationNumberStatus");

                    b.Property<int>("NotificationTypeId");

                    b.Property<bool>("Status");

                    b.Property<int>("SubCategoryId");

                    b.Property<string>("WhoId");

                    b.Property<string>("WhonId");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("WhoId");

                    b.HasIndex("WhonId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.NotificationTypeLang", b =>
                {
                    b.Property<int>("NotificationTypeLangId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("NotificationName");

                    b.Property<int>("NotificationTypeId");

                    b.HasKey("NotificationTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("NotificationTypeLangs");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.OpenSubCategory", b =>
                {
                    b.Property<int>("OpenSubCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("SubCategoryId");

                    b.Property<string>("UserId");

                    b.HasKey("OpenSubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("OpenSubCategories");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ContestantContestStatus");

                    b.Property<bool>("ContestantDeletingStatus");

                    b.Property<string>("ContestantId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("DuelId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("PostTypeId");

                    b.Property<int>("SubCategoryId");

                    b.Property<bool>("UserDeletingStatus");

                    b.Property<string>("UserId");

                    b.HasKey("PostId");

                    b.HasIndex("PostTypeId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.PostType", b =>
                {
                    b.Property<int>("PostTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("PostTypeId");

                    b.ToTable("PostTypes");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.PostTypeLang", b =>
                {
                    b.Property<int>("PostTypeLangId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<byte>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("PostTypeId");

                    b.HasKey("PostTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PostTypeId");

                    b.ToTable("PostTypeLangs");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnswerType");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Link");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("QuestionType");

                    b.Property<int>("SubCategoryId");

                    b.HasKey("QuestionId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.QuestionLang", b =>
                {
                    b.Property<int>("QuestionLangId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("QuestionId");

                    b.Property<string>("Questions");

                    b.Property<string>("Stylish1");

                    b.Property<string>("Stylish2");

                    b.Property<string>("Stylish3");

                    b.HasKey("QuestionLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionLangs");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DuelInfoId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<byte>("Point");

                    b.Property<DateTime>("ScoreDate");

                    b.Property<int>("SubCategoryId");

                    b.Property<string>("UserId");

                    b.HasKey("ScoreId");

                    b.HasIndex("DuelInfoId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Setting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("SettingTypeId");

                    b.Property<string>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("SettingId");

                    b.HasIndex("SettingTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.SettingType", b =>
                {
                    b.Property<int>("SettingTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("SettingName");

                    b.HasKey("SettingTypeId");

                    b.ToTable("SettingTypes");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<byte>("Order");

                    b.Property<string>("PictuePath");

                    b.Property<int>("Price");

                    b.Property<bool>("Visibility");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.SubCategoryLang", b =>
                {
                    b.Property<int>("SubCategoryLangId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("SubCategoryId");

                    b.Property<string>("SubCategoryName");

                    b.HasKey("SubCategoryLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("SubCategoryLangs");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Support", b =>
                {
                    b.Property<int>("SupportId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Message");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<bool>("Status");

                    b.Property<byte>("SupportTypeId");

                    b.Property<string>("UserId");

                    b.HasKey("SupportId");

                    b.HasIndex("SupportTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.SupportType", b =>
                {
                    b.Property<byte>("SupportTypeId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("SupportTypeId");

                    b.ToTable("SupportTypes");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.SupportTypeLang", b =>
                {
                    b.Property<int>("SupportTypeLangId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<byte>("LanguageId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<byte>("SupportTypeId");

                    b.HasKey("SupportTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SupportTypeId");

                    b.ToTable("SupportTypeLangs");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CoverPicturePath");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FaceBookId");

                    b.Property<string>("FullName");

                    b.Property<string>("LanguageCode");

                    b.Property<DateTime>("LastActiveDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePicturePath");

                    b.Property<DateTime>("RegistryDate");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.AskedQuestion", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Question", "Question")
                        .WithMany("AskedQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.SubCategory", "SubCategory")
                        .WithMany("AskedQuestions")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "User")
                        .WithMany("AskedQuestions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.CategoryLang", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Category", "Category")
                        .WithMany("CategoryLangs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.Language", "Language")
                        .WithMany("CategoryLangs")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Chat", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "ReceiverUser")
                        .WithMany("Receivers")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "SenderUser")
                        .WithMany("Senders")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.ChatBlock", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "WhoUser")
                        .WithMany("Whos")
                        .HasForeignKey("WhoId");

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "WhonUser")
                        .WithMany("Whons")
                        .HasForeignKey("WhonId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.ChatReply", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Chat", "Chat")
                        .WithMany("ChatReplys")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "User")
                        .WithMany("ChatReplys")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Comment", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.CompletedMission", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Mission", "Mission")
                        .WithMany("CompletedMissions")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "User")
                        .WithMany("CompletedMissions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Cp", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "User")
                        .WithMany("CpS")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.CpInfo", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Cp", "Cp")
                        .WithMany("CpInfos")
                        .HasForeignKey("CpId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Duel", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "CompetitorUser")
                        .WithMany("Competitors")
                        .HasForeignKey("CompetitorUserId");

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "FounderUser")
                        .WithMany("Founders")
                        .HasForeignKey("FounderUserId");

                    b.HasOne("ContestPark.DataAccessLayer.Tables.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.DuelInfo", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Duel", "Duel")
                        .WithMany("DuelInfos")
                        .HasForeignKey("DuelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.Question", "Question")
                        .WithMany("DuelInfoes")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Follow", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "FollowUpUser")
                        .WithMany("FollowUpUsers")
                        .HasForeignKey("FollowUpUserId");

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "FollowedUser")
                        .WithMany("FollowedUsers")
                        .HasForeignKey("FollowedUserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.FollowCategory", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.SubCategory", "SubCategory")
                        .WithMany("FollowCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "User")
                        .WithMany("FollowCategories")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Like", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.MissionLang", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Language", "Language")
                        .WithMany("MissionLangs")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.Mission", "Task")
                        .WithMany("MissionLangs")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Notification", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "Who")
                        .WithMany("NotificationWhos")
                        .HasForeignKey("WhoId");

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "Whon")
                        .WithMany("NotificationWhons")
                        .HasForeignKey("WhonId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.NotificationTypeLang", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Language", "Language")
                        .WithMany("NotificationTypeLangs")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.NotificationType", "NotificationType")
                        .WithMany("NotificationTypeLangs")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.OpenSubCategory", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.SubCategory", "SubCategory")
                        .WithMany("OpenSubCategoris")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "User")
                        .WithMany("OpenSubCategories")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Post", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.PostType", "PostType")
                        .WithMany("Posts")
                        .HasForeignKey("PostTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.PostTypeLang", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Language", "Language")
                        .WithMany("PostTypeLangs")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.PostType", "PostType")
                        .WithMany("PostTypeLangs")
                        .HasForeignKey("PostTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Question", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.SubCategory", "SubCategory")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.QuestionLang", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Language", "Language")
                        .WithMany("QuestionLangs")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.Question", "Question")
                        .WithMany("QuestionLangs")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Score", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.DuelInfo", "DuelInfo")
                        .WithMany("Scores")
                        .HasForeignKey("DuelInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.SubCategory", "SubCategory")
                        .WithMany("Scores")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "User")
                        .WithMany("Scores")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Setting", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.SettingType", "SettingType")
                        .WithMany("Settings")
                        .HasForeignKey("SettingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.SubCategory", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.SubCategoryLang", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Language", "Language")
                        .WithMany("SubCategoryLangs")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.SubCategory", "SubCategory")
                        .WithMany("SubCategoryLangs")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.Support", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.SupportType", "SupportType")
                        .WithMany("Supports")
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User", "User")
                        .WithMany("Supports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContestPark.DataAccessLayer.Tables.SupportTypeLang", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.Language", "Language")
                        .WithMany("SupportTypeLangs")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.SupportType", "SupportType")
                        .WithMany("SupportTypeLangs")
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContestPark.DataAccessLayer.Tables.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ContestPark.DataAccessLayer.Tables.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
